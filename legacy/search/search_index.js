var __index = {"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Oceanology 5 Documentation","text":"<p>Welcome to the Oceanology 5 documentation! This resource is designed to help you explore and utilize the Oceanology plugin for Unreal Engine, which brings stunning ocean environments and realistic water simulation to your projects.</p>"},{"location":"index.html#what-is-oceanology","title":"What is Oceanology?","text":"<p>Oceanology is a powerful Unreal Engine plugin that allows developers to create dynamic and immersive ocean scenes. With advanced features like realistic water physics, customizable waves, and detailed underwater effects, you can elevate your projects to new depths.</p>"},{"location":"index.html#key-features","title":"Key Features","text":"<ul> <li>Realistic Water Simulation: Experience lifelike water behavior with advanced physics and shader techniques.</li> <li>Customizable Waves: Tailor the appearance and behavior of ocean waves to fit your project needs.</li> <li>Underwater Effects: Create stunning underwater environments with caustics, fog, and visibility effects.</li> <li>Easy Integration: Seamlessly integrate Oceanology into your existing Unreal Engine projects.</li> </ul>"},{"location":"index.html#getting-started","title":"Getting Started","text":"<p>To get started with Oceanology, follow these steps:</p> <ol> <li>Purchase Oceanology from the Unreal Engine Marketplace.</li> <li>Install the Plugin: Follow the installation instructions here</li> <li>Explore the Documentation: Use this documentation to learn about all the features and functionalities of Oceanology.</li> </ol>"},{"location":"index.html#documentation-overview","title":"Documentation Overview","text":"<p>This documentation includes the following sections:</p> <ul> <li>Installation Guide: Step-by-step instructions for installing and setting up Oceanology.</li> <li>Feature Overview: Detailed explanations of each feature and how to use them.</li> <li>Tutorials: Hands-on tutorials to help you create ocean scenes.</li> <li>API Reference: Comprehensive API documentation for developers.</li> </ul>"},{"location":"index.html#community-and-support","title":"Community and Support","text":"<p>Join our discord community to connect with other users, developers, get access to the latest updates, tutorials, and news. If you have questions or need support, feel free to reach out via discord:</p> <ul> <li>Discord Channel</li> </ul>"},{"location":"index.html#other-social","title":"Other Social","text":"<p>Follow us to always keep updated on our newest showcased releases:</p> <ul> <li>YouTube</li> </ul> <p>Thank you for choosing Oceanology! We look forward to seeing the amazing ocean environments you create with it.</p>"},{"location":"getting-started/installation.html","title":"Installation Guide","text":"<p>Provides a step-by-step guide to install and configure the Oceanology engine plugin for your Unreal Engine project. This step will run you through how to install the plugin to unreal engine.</p> Open Launcher and navigate to the library section then look for Oceanology plugin Once the engine version is selected, the installation of the add-on will begin. Installation of the plugin will begin."},{"location":"getting-started/setup.html","title":"Setup Guide","text":"<p>Provides a step-by-step guide to setup Oceanology requirments. If you need help adding Oceanology to your scene after all requirements have been configured video here [TODO VIDEO] </p> <p>Note</p> <p>Before integrating Oceanology into your main project, generating a test project is recommended.</p> <p>Before jumping into it lets create a new Unreal third person sample project. You may name it what you wish.</p> Lets create a test project. Next we have to update the defaultengine.ini file. Navigate to file explorer and find your project root Open Config folder and open DefaultEngine.ini. Find Engine.RendererSettings section and update it as following"},{"location":"getting-started/setup.html#defaultengineini","title":"DefaultEngine.ini","text":"<p>These settings are important to make sure that your render settings play nice with oceanology. Feel free to merge your custom settings with the requirments below but keep in mind we can't test all settings so if you experience issues feel free to head over to our discord community.</p> <p>Note</p> <p>Important code may vary depending on the version of the engine. This code is used to correct rendering problems, such as strange artifacts and blinking when moving a plane. Add under the section <code>[/Script/Engine.RendererSettings]</code> below the default settings in <code>project/config/defaultengine.ini</code></p> <p>Open <code>defaultengine.ini</code> and look for <code>[/Script/Engine.RendererSettings]</code> looks approximately like:</p> <pre><code>[/Script/Engine.RendererSettings]\nr.ReflectionMethod=1\nr.GenerateMeshDistanceFields=True\nr.DynamicGlobalIlluminationMethod=1\nr.Lumen.TraceMeshSDFs=0\nr.Shadow.Virtual.Enable=1\nr.Mobile.EnableNoPrecomputedLightingCSMShader=1\nr.DefaultFeature.AutoExposure.ExtendDefaultLuminanceRange=True\n\nr.DefaultFeature.LocalExposure.HighlightContrastScale=0.8\n\nr.DefaultFeature.LocalExposure.ShadowContrastScale=0.8\n</code></pre> <p>Now add:</p> <pre><code>;Lighting\nr.SupportStationarySkylight=False\nr.SupportLowQualityLightmaps=False\nr.Mobile.EnableStaticAndCSMShadowReceivers=False\nr.Mobile.AllowDistanceFieldShadows=False\nr.DefaultBackBufferPixelFormat=4\n\n;Optimized\nr.optimizedWPO=1\n\n;AntiAliang\nr.AntiAliasingMethod=4\nr.MSAACount=4\nr.TSR.AsyncCompute=3\n\n;MotionBlur\nr.DefaultFeature.MotionBlur=False\n\n;Velocity\nr.VelocityOutputPass=2\n\n;Shadow.Virtual\nr.Shadow.Virtual.NonNanite.IncludeInCoarsePages=0\nr.Shadow.Virtual.ForceOnlyVirtualShadowMaps=1\nr.Shadow.Virtual.TranslucentQuality=0\nr.Shadow.Virtual.Cache.DrawInvalidatingBounds=1\nr.Shadow.Virtual.Cache.StaticSeparate=1\nr.UseClusteredDeferredShading=1\nr.Shadow.Virtual.OnePassProjection=1\nr.Shadow.Virtual.NormalBias=1\nr.Shadow.Virtual.ForceOnlyVirtualShadowMaps=1\n\n;Distance Fields\nr.DistanceFields.MaxPerMeshResolution=256\nr.DistanceFields.SupportEvenIfHardwareRayTracingSupported=0\n\n;SkinCache\nr.SkinCache.MemoryLimitForBatchedRayTracingGeometryUpdates=128\nr.SkinCache.MaxRayTracingPrimitivesPerCmdList=1000000\nr.SkinCache.MaxDispatchesPerCmdList=1000\nr.SkinCache.AllowDupedVertsForRecomputeTangents=1\nr.SkinCache.RecomputeTangentsParallelDispatch=1\nr.SkinCache.SceneMemoryLimitInMB=148\nr.SkinCache.CompileShaders=True\nr.SkinCache.DefaultBehavior=0\n\n;GPU SkinCache\nr.GPUSkin.Support16BitBoneIndex=True\nr.GPUSkin.UnlimitedBoneInfluences=True\nr.GBufferDiffuseSampleOcclusion=1\n\n;Lumen\nr.Lumen.ScreenProbeGather.ScreenTraces.HZBTraversal.UncertainTraceRelativeDepthThreshold=.02\nr.Lumen.ScreenProbeGather.ScreenSpaceBentNormal.ApplyDuringIntegration=0\nr.Lumen.Tracing.MaxTraceDistance=20000\nr.LumenScene.SurfaceCache.MeshCardsMergedResolutionScale=1\nr.LumenScene.SurfaceCache.MeshCardsMaxLOD=0\nr.LumenScene.DirectLighting.OffscreenShadowing.TraceMeshSDFs=0\nr.Lumen.HardwareRayTracing=1\nr.Lumen.TranslucencyVolume.TraceFromVolume=1\nr.Lumen.Reflections.RadianceCache=1\nr.LumenScene.Radiosity.ProbeOcclusion=0\nr.LumenScene.FarField=1\nr.LumenScene.FarField.MaxTraceDistance=100000\nr.Lumen.HardwareRayTracing.MaxIterations=128\nr.Lumen.TraceMeshSDFs=0\nr.Lumen.SampleFog=0\nr.Lumen.Reflections.Contrast=0.75\nr.Lumen.TranslucencyReflections.FrontLayer.EnableForProject=True\n\n;ShadingRejection\nr.TSR.History.SampleCount=32\nr.TSR.ShadingRejection.Flickering.FrameRateCap=30\nr.TSR.ShadingRejection.Flickering.MaxParralaxVelocity=2\nr.TSR.ShadingRejection.Flickering.Period=3\n\n;World Partition\nwp.Runtime.RuntimeSpatialHashUseAlignedGridLevels=0\nwp.Runtime.RuntimeSpatialHashSnapNonAlignedGridLevelsToLowerLevels=0\nwp.Runtime.RuntimeSpatialHashPlaceSmallActorsUsingLocation=1\nwp.Runtime.RuntimeSpatialHashPlacePartitionActorsUsingLocation=0\n\n;Texture Streaming\nr.Streaming.PoolSize=8000\nr.MeshStreaming=True\n\n;Occlusion\nr.NumBufferedOcclusionQueries=2\nr.InstanceCulling.OcclusionCull=1\n;LevelStreaming\ns.LevelStreamingActorsUpdateTimeLimit=10\ns.UnregisterComponentsTimeLimit=5\n\n;Nanite\nr.Nanite.Streaming.Imposters=0\nr.Nanite.CoarseMeshStreaming=True\nr.Nanite.ProxyRenderMode=2\nr.Nanite.Streaming.NumInitialRootPages=6144\nr.Nanite.MaxNodes=2621440\n\n;Shaders\nr.Shaders.RemoveDeadCode=1\n\n;GPU scene\nr.GPUScene.ParallelUpdate=1\n\n;Virtual Texture\nr.VirtualTextures=True\nr.VirtualTexturedLightmaps=True\nbEnableVirtualTextureOpacityMask=True\nr.VT.MaxUploadsPerFrame=500\nr.VT.MaxUploadsPerFrameInEditor=1000\nr.VT.MaxTilesProducedPerFrame=100\nr.VT.MaxReleasedPerFrame=5\nr.VT.NumGatherTasks=6\nr.VT.SyncProduceLockedTiles=0\nr.VT.IOPriority_HighPagePri=4\nr.VT.CsvStats=2\n\n[/Script/Engine.VirtualTexturePoolConfig]\n+Pools=(Formats=(PF_DXT1), SizeInMegabyte=120,  bAllowSizeScale=True, MinScaledSizeInMegabyte=37, bEnableResidencyMipMapBias=True)\n+Pools=(Formats=(PF_DXT5), SizeInMegabyte=37,  bAllowSizeScale=True, MinScaledSizeInMegabyte=8, bEnableResidencyMipMapBias=True)\n+Pools=(Formats=(PF_BC4),  SizeInMegabyte=37,  bAllowSizeScale=True, MinScaledSizeInMegabyte=16, bEnableResidencyMipMapBias=True)\n+Pools=(Formats=(PF_BC5),  SizeInMegabyte=72,  bAllowSizeScale=True, MinScaledSizeInMegabyte=16, bEnableResidencyMipMapBias=True)\n+Pools=(Formats=(PF_BC6H), SizeInMegabyte=60,  bAllowSizeScale=True, MinScaledSizeInMegabyte=30, bEnableResidencyMipMapBias=True)\n+Pools=(Formats=(PF_BC7),  SizeInMegabyte=72, bAllowSizeScale=True, MinScaledSizeInMegabyte=37 bEnableResidencyMipMapBias=True)\n+Pools=(Formats=(PF_G8),  SizeInMegabyte=200, bAllowSizeScale=True, MinScaledSizeInMegabyte=70 bEnableResidencyMipMapBias=True)\n+Pools=(SizeInMegabyte=64, bAllowSizeScale=False, bEnableResidencyMipMapBias=False)\n\n;NVidia DLSS\nr.Streamline.DLSSG.Enable=1\nr.NGX.DLSS.WaterReflections.TemporalAA=1\n[/Script/DLSS.DLSSSettings]\nbEnableDLSSInEditorViewports=True\n</code></pre> <p>Next open your project you created above from the launcher and navigate to the plugins settings</p> Navigate to the plugin settings Look for the Oceanology and enable it Restart when prompted Enable plugin content visibility as these may be hidden by default. Navigate to plugin content for demo levels and files"},{"location":"getting-started/features/audio-system.html","title":"Audio System","text":"<p>Oceanology supports two different modes of Audio: Underwater &amp; Waves. The behavior of underwater and non-underwater detection can be checked via \"Debug Enabled\" perfectly.</p> <p></p>"},{"location":"getting-started/features/audio-system.html#underwater-audio","title":"Underwater Audio","text":"<p>The underwater audio plays when the actual camera is below the waterline of the current overlapping water body.</p>"},{"location":"getting-started/features/audio-system.html#wave-audio","title":"Wave Audio","text":"<p>The wave audio plays only when you are NOT underwater and also uses Attenuation.</p>"},{"location":"getting-started/features/audio-system.html#actors","title":"Actors","text":"<ul> <li>The BP_OceanologyLake itself contains all the necessary audio (underwater &amp; waves), you only need to configure the attenuation settings yourself. Changing the size of the lake also increases the falloff distance.</li> <li>The BP_OceanologyInfiniteOcean itself contains ONLY the underwater Ocean audio. Wave sounds of the shore should be manually placed.</li> <li>The BP_OceanWaveAudio is the actor designed for the ocean shore wave audio. You may place multiple actors of this fine-tuning to your own taste the audio settings alongside the Ocean's shore. This behavior guarantees that wave audio only plays near the shores, and not in the middle of the island.</li> </ul>"},{"location":"getting-started/features/buoyancy-configuration.html","title":"Buoyancy","text":"<p>Before proceeding any further, first please read this documentation Water Volume</p> <p>Oceanology uses the OceanBuoyancyComponent to make an actor buoyant in your scene. This is an Actor component, so you can plug it into ANY actor theoretically. We have tested the functionality of this component with AStaticMeshActor, ASkeletalMeshActor and simple AActor.</p>"},{"location":"getting-started/features/buoyancy-configuration.html#quick-start","title":"Quick Start","text":"<ul> <li>Add OceanBuoyancyComponent into your Actor.</li> <li>Add at least ONE (or more) pontoon to your OceanBuoyancyComponent. Make sure the pontoon's mode is set to \"Buoyancy\". You can use the \"Debug Pontoons\" button under the OceanBuoyancyComponent of your actor inside the editor to see where your pontoons are placed around the mesh.</li> <li>Add a Static or Skeletal mesh component into your Actor. The \"DefaultSceneRoot\" component (if exists) has to be removed by making the Static or SkeletalMesh component the ROOT component of your actor.</li> <li>Under the \"Collision\" section you must turn ON the \"Generate Overlap Events\" section. There you must also make sure your mesh collision settings are able to collide with the Water Volume. As a reference you can check (or directly use) the \"PhysicsActor\" collision preset.</li> <li>If you want the physics to be replicated under the \"Physics\" section you have to turn ON the \"Replicate Physics to Autonomous Proxy\" option.</li> <li>Also under the \"Physics\" section you have to turn ON the \"Simulate Physics\" option.</li> <li>Be aware that the mass of the mesh component may alter the buoyancy behavior as well.</li> </ul>"},{"location":"getting-started/features/buoyancy-configuration.html#example-for-quick-start","title":"Example for Quick Start","text":""},{"location":"getting-started/features/buoyancy-configuration.html#explanation","title":"Explanation","text":"<ul> <li>There are several options inside the OceanBuoyancyComponent to fine-tune the buoyancy of an actor, most of them have tooltip with explanation - and some don't but are self-explanatory. You may experiment with changing them, but radical variables may alter the behavior in an unwanted manner. So changes with caution!</li> <li>Most of the users only need to add Pontoons to their mesh inside their OceanBuoyancyComponent.</li> <li>There is a way to enable live debug spheres for the pontoons under the \"Debug\" section, but be aware drawing debug circles has an impact on performance. It is only recommended to be used for debugging and testing.</li> <li>There is a way to make global wave forces to impact the buoyancy, there is a configuration for that.</li> <li>There is a configuration to alter the buoyancy update interval, it will improve your performance, but cause delayed buoyancy with inaccuracy. Some users may prefer this, some users may not. This is the Buoyancy Update Interval configuration.</li> </ul>"},{"location":"getting-started/features/infinite-or-not-infinite.html","title":"Infinite","text":"<p>The infinite related options can be found under the \"Infinite\" section inside the Ocean's class. Oceanology uses \"origin shifting\" technology to achieve the infinite ocean effect. That means the origin of the actor is being relocated as you move your camera. You can notice the effect while moving inside the editor/in-game you will see the \"XY\" axis of the actor is constantly changing. The \"Z\" axis is not affected, because the \"Z\" represents the water level of the Ocean.</p> <p></p>"},{"location":"getting-started/features/infinite-or-not-infinite.html#explanation-of-the-options","title":"Explanation of the options","text":"<ul> <li>Enable Infinity - by default it is \"true\", by ticking off the checkbox you can set it to \"false\" disabling the infinity.</li> <li>Time Jump - It is used during the origin shifting actor snapping. Can be used to fine-tune the infinity effect, however I recommend using the default value.</li> </ul>"},{"location":"getting-started/features/infinite-or-not-infinite.html#smaller-oceans-seas","title":"Smaller Oceans &amp; Seas","text":"<p>If you desire to make a \"smaller ocean/sea\" you need to turn off the \"Enable Infinity\" option, and also reduce the Grid Size in the QuadTree.</p> <p>Please see the image below to achieve this: </p>"},{"location":"getting-started/features/quadtree.html","title":"QuadTree","text":"<p>Oceanology uses a QuadTree to generate the \"water plane\" mesh. The big infinite Ocean is not just a \"simple plain water plane\" as it would cost a lot of performance. We use the QuadTree logic to optimize performance to a gameplay acceptable level.</p> <p>The Oceanology procedural quadtree utilizes UHierarchicalInstancedStaticMeshComponent to construct the Grid Mesh. Outside of the Grid Mesh we use a \"Far Mesh\" component which is a simple UStaticMeshComponent to provide a distance mesh for distant view. It uses a different material logic for better performance.</p> <p>For more information about QuadTree please read this: https://en.wikipedia.org/wiki/Quadtree</p>"},{"location":"getting-started/features/quadtree.html#the-actor-panel-options-of-the-quadtree","title":"The Actor Panel options of The QuadTree","text":""},{"location":"getting-started/features/quadtree.html#explanation-of-the-options","title":"Explanation of the options","text":"<ul> <li>Show Mesh - used to show and hide the mesh</li> <li>Grid Size - used to configure the size of a single grid</li> <li>Grid Tiles - used to configure the number of grid tiles</li> <li>Cell Size - used to configure quad tree cell's size</li> </ul>"},{"location":"getting-started/features/quadtree.html#modes","title":"Modes","text":"<p>The Quad Tree Mode defines the Mesh's quality that is used to render the Ocean Surface. The Quality Mode of the quad tree affects the Waterline's (water cutoff effect) precision.</p> <p>We support 3 quadtree modes: * Game Ready (default) - this is the most performance friendly  * Simulation - better quality, but costs performance * Render - even greater quality, but costs more performance</p>"},{"location":"getting-started/features/quadtree.html#mesh-user-override","title":"Mesh User Override","text":"<p>If you don't want to use the default quad tree system but use a custom mesh, you can by ticking on \"User Override Mesh\" box which will let you specify a \"Mesh\" and a \"Mesh Far\" option to override/overwrite the default quadtree quality mesh selection behavior.</p>"},{"location":"getting-started/features/rvt-heightmap-actor-manager.html","title":"RVT Heightmap Actor Manager","text":"<p>The RVT Heightmap Actor is responsible for virtual texture-based capturing of Landscape to produce shoreline foam and landscape ocean exclusion. This also serves as a utility tool for several ocean-related captures.</p> <p>RVT is the most correct way to capture the Height of the Landscape including Location positioning and scaling. This way we can make sure that the Heightmap is correctly interacting with the Landscape. This way you can also create a new height map for your landscape quickly that Oceanology will use.</p> <p>The Ocean and Lake uses the T_Heightmap which is a static texture. This texture is generated by the RVT heightmap actor. Please read the guide below to do so.</p>"},{"location":"getting-started/features/rvt-heightmap-actor-manager.html#overview","title":"Overview","text":""},{"location":"getting-started/features/rvt-heightmap-actor-manager.html#quick-start","title":"Quick Start","text":"<ul> <li>Enable Virtual textures in your project settings.</li> <li>Create a landscape, do some sculpting or import a heightmap.</li> <li>Setup a Landscape material that feeds RVT with some data. (Take a look at M_Landscape_RVT in Oceanology examples)</li> <li>Drag &amp; drop an ocean and some lakes to your scene.</li> <li>Drag &amp; drop the Oceanology RVT Heightmap actor to your scene.</li> <li>Change the \"Bounds Align Actor\" of your Oceanology RVT Heightmap actor to your landscape.</li> <li>Press \"Setup Landscape\" button.</li> <li>Press the \"Set Bounds\" button. Make sure the yellow box of the actor covers your whole landscape. If you have multiple landscapes you have to scale it manually to cover all extra landscapes.</li> <li>Change the \"build level\" to \"4\" or \"5\" depending on your taste, and press the \"Build\" button. Build Level 12 is really expensive, and you do not need that high quality. Level 4 is sufficient for most use cases.</li> <li>Press the \"Save Heightmap\" button and choose a path for your Heightmap Texture. By default it is the level name. Do the same with \"Bake SDF\".</li> <li>Press \"Setup Water\" button.</li> <li>Press \"Set Water Min/Max\" button.</li> <li>Save your scene and start playing with the \"RVT\" category of your water bodies. (Both Ocean and Lake has these options.) Adjusting Depth for foam should be the number one option to play with.</li> </ul>"},{"location":"getting-started/features/swimming-configuration.html","title":"Swimming","text":"<p>Before proceeding any further, first please read this documentation Water Volume and Buoyancy Configuration.</p> <p>In order to \"swim\" you will need to place a WaterVolume with swimming enabled in the area on the configured water body.</p>"},{"location":"getting-started/features/swimming-configuration.html#difficulty-intermediate","title":"Difficulty: Intermediate","text":"<p>The guide assumes the user has at least intermediate skills in Unreal Engine involving: 1. setting up AnimBP with or without re-targeting 2. working with any actor components 3. assigning and using custom blueprint events 4. setting up input control via Enhanced Input system</p>"},{"location":"getting-started/features/swimming-configuration.html#about-swimming-system","title":"About Swimming System","text":"<p>Oceanology uses buoyant swimming to provide a semi-realistic swimming experience to the users. Therefore in order to setup swimming, first you need to drag and OceanBuoyancyComponent to your character. Read the Buoyancy Configuration documentation first for more information about buoyancy.</p> <p>Buoyant swimming means that your character gently floats towards the surface of the water (this behavior can be controlled via the SwimmingBuoyancyForceMultiplier, using value \"0\" disables that behavior), and when your character drowns to death as per the BP_ThirdPersonCharacter example it will ragdoll float towards the water surface.</p> <p>Setting up the \"swimming system\" itself is actually easy, but setting up the AnimBP is a lot harder, as it is different for each user and each use case.</p>"},{"location":"getting-started/features/swimming-configuration.html#quick-start","title":"Quick Start","text":"<p>Before proceeding any further, I recommend you to take a look at how BP_ThirdPersonCharacter is setup in the Oceanology demo example.</p> <p></p> <ol> <li>Open your character class. (For example BP_ThirdPersonCharacter)</li> <li>Add OceanBuoyancyComponent to your character class and setup 2 pontoons such as \"FullBody\" and \"Head\".</li> <li>The \"FullBody\" pontoon must be of \"Mode\" set to \"Buoyancy\" and it's center should be in the middle of your character.</li> <li>The \"Head\" pontoon must be of \"Mode\" set to \"Water Enter Exit Event Only\" and it should be placed on the head of your character.</li> <li>You can turn on \"Draw Debug Spheres\" option of the Buoyancy component to visualize the spheres you configured. If the spheres are at their right location the Buoyancy part is finished.</li> <li>Add OceanSwimmingComponent to your character class.</li> <li>Make sure the \"Buoyancy Pontoon Socket for Enter Water Event\" inside the OceanSwimmingComponent is the same as the \"Head\" pontoon's name. By default it's \"Head\" so it should be fine.</li> <li>If you want replicated system you must turn on \"Component Replicates\" flag on both OceanBuoyancyComponent and OceanSwimmingComponent.</li> <li>Now that both buoyancy and swimming is configured, you need to setup the input controls. You can check the BP_ThirdPersonCharacter of Oceanology demo to inspire yourself, but eventually this part is different per each user.</li> <li>Now the last and hardest part: The Anim BP.</li> <li>Inside the Character/Mannequins/Animations directory there is an ABP_StateObject class, it is a simple UObject to store all \"swimming states\" - this is a standard and recommended approach to store states for animation blueprints. Open this class and study it. You can inspire from it to create your own state class, or just copy this one. It is up to the user.</li> <li>You then open the ABP_Manny anim blueprint, there you will see a function called \"InitStateObject\" and a variable called \"StateObject\" - this is how the \"swimming states\" are linked to the animation.</li> <li>Looking at AnimGraph -&gt; Swimming and it's states you may study how this works. The states are linked to the Anim Rules via \"Property Access\" from the aforementioned \"StateObject\".</li> <li>You need to create a similar Swimming graph in your own character's AnimBP and link the states via \"Property Access\" (right click in Anim BP -&gt; Search \"Property Access\" -&gt; reference StateObject and it's fields) of each swimming state.</li> <li>The easiest approach here is to study each swimming state and each swimming animation of the Oceanology demo and then setting up it with your own character.</li> <li>You can also just copy the anim graph from Oceanology and the state object and customize it to your needs. This approach only works however with mannequin-alike humanoid characters. Custom animations requires further fine-tuning with the states.</li> </ol> <p> </p>"},{"location":"getting-started/features/swimming-configuration.html#controls","title":"Controls","text":"<ul> <li>REQUIRED: You need to check \"Movement Input\" section of the BP_ThirdPersonCharacter. The right/left and forward/backward water movement logic is there.</li> <li>OPTIONAL: You need to check \"Surface Locked Swimming\" section of the BP_ThirdPersonCharacter.</li> <li>OPTIONAL: You need to check \"Swim Fast\" section of the BP_ThirdPersonCharacter.</li> <li>OPTIONAL: You need to check \"Swim Up / Swim Down\" section of the BP_ThirdPersonCharacter.</li> </ul>"},{"location":"getting-started/features/swimming-configuration.html#settings","title":"Settings","text":"<p>Most of the Oceanology swimming settings have a tooltip to explain their usage, if not they are self-explanatory. I will describe some of the settings here only.</p> <p>Please note most of use-case scenarios can be covered by copying the Oceanology demo's BP_ThirdPersonCharacter settings in both Buoyancy and Swimming components. This is the \"quick &amp; short\" setup scenario. However, Oceanology provides several options to fine-tune swimming for each unique characters of size and complexity. Some custom character will need animation retargeting, meanwhile other custom characters will only require Pontoon size and location adjustments. The swimming system takes into account the character's collision capsule heights, so each custom character may be required to fine-tune that as well.</p> <ul> <li>With the \"Debug Enabled\" option you can see most of the swimming states, spheres, and debug messages that is useful for investigating a specific characteristic of the swimming system or potentially identifying a bug. This option is for Advanced users. This can be combined with the Buoyancy debug options as well.</li> <li>There is an \"Underwater\" section to control the counters that drive the underwater events. Inside the \"Effects\" subsection of the \"Underwater\" section you can change the swimming bubble niagara effects, and setup their socket locations. Please note, your character's skeleton is required to have the sockets created to make the effects work. Please look at oceanology mannequin skeleton for that. There is also an option here to control the swim trail sound under the \"Sound\" subsection.</li> <li>The \"Controls\" section has movement alteration options, these options are only active during swimming, when you stop swimming the original movement component's settings are restored.</li> </ul>"},{"location":"getting-started/features/swimming-configuration.html#events","title":"Events","text":"<p>Please take a look at the \"UserExampleGraph\" of the BP_ThirdPersonCharacter of Oceanology demo.</p> <p></p> <p>This demonstrates the custom assignable events of the Oceanology swimming and visualizes them on an Example user HUD. Each swimming state and special swimming and water related event has a custom assignable event to have maximum customization for the user.</p> <p>These events can be used to customize swimming with additional business logic of the user. That can be playing a sound, printing debug messages, playing some random animation or setting a variable. Basically anything the user desires.</p> <p></p>"},{"location":"getting-started/features/water-volume.html","title":"Water Volume","text":"<p>A water volume in Oceanology is a Box to control physics and swimming. Multiple water volumes can be placed in a scene depending on the amount of water bodies you want to spawn and on the size of the area you wish to set swimmable and buoyant.</p> <p>It is very important that you must have \"Generate Overlap Events\" enabled on your objects you want to make buoyant/swimmable, and they must have at least a basic collision settings allowing overlap events. Please see the demo levels for example.</p>"},{"location":"getting-started/features/water-volume.html#the-panel","title":"The panel","text":""},{"location":"getting-started/features/water-volume.html#the-options","title":"The Options","text":"<ul> <li>The \"Oceanology Water\" is a required parameter of this actor. Without this the volume will NOT work.</li> <li>You need to pick a water body from your scene here. This is either the infinite ocean itself or one of your lakes.</li> <li>Please be aware if you want to place 10 swimmable/buoyant lakes in your scene and an ocean, you will need 11 water volumes at least for them.</li> <li>Though if you wish to cover 4 parts (shores you might say) of the Ocean, you will need 14 water volumes then. 10 volumes for the lakes, and 4 volumes for each shore.</li> <li>It all depends on user's taste how much part of the ocean or the lakes the user wants to cover with physics.</li> <li>The \"Box Extent\" is the option to control the size of the volume on a vector. (XYZ)</li> <li>The volume supports an \"initial overlap check\" that happens on BeginPlay after a little delay. This can be altered or turned off. This option iterates over all actors in your scene and checking for overlap events. Turning off may lead some actors not overlapping after BeginPlay.</li> <li>The \"Enable Buoyancy In Area\" controls whether there buoyancy components of actors and characters with UOceanBouyancyComponent will work or not in the area or not.</li> <li>The \"Enable Swimming in Area\" controls whether the volume is a swimmable area or not. If \"True\" the system automatically spawns a water PhysicsVolume with the same scale/location/rotation of the water volume. This affects characters with UOceanSwimmingComponent.</li> <li>The \"Debug Enabled\" option will display the bounds of the box in game and send PrintString messages when overlap events happen.</li> </ul>"},{"location":"intergrations/index.html","title":"Oceanology Integrations","text":"<p>Below is a list of some key community make integrations that can help you combine Oceanology with other assets and systems for even more dynamic and interactive environments.</p>"},{"location":"intergrations/index.html#other-integrations","title":"Other Integrations","text":"<p>We are constantly working to expand the integration capabilities of Oceanology. Keep an eye on this page for updates on more plugin integrations. If you wish to add a plugin please let us know on our offical discord! For more information about other available plugins, check back often or join the community discussions.</p>"},{"location":"intergrations/WaterInteractionPlugin.html","title":"WaterInteractionPlugin","text":""},{"location":"intergrations/WaterInteractionPlugin.html#waterinteractionplugin","title":"WaterInteractionPlugin","text":"<p>The WaterInteractionPlugin enables seamless integration between Oceanology and Fluid Ninja Live, allowing for advanced water interaction effects. With this plugin, you can combine the fluid simulation and water interaction features of Fluid Ninja with the ocean simulation capabilities of Oceanology to create realistic water dynamics and fluid behaviors in your projects.</p>"},{"location":"intergrations/WaterInteractionPlugin.html#features","title":"Features:","text":"<ul> <li>Integration of Oceanology ocean surfaces with Fluid Ninja Live fluid simulations.</li> <li>Real-time interaction between player-controlled objects and water surfaces.</li> <li>Fluid effects such as ripples, waves, and turbulence reacting to gameplay events.</li> </ul> <p>To learn more about how to use this plugin and set it up for your project, visit the GitHub repository.</p>"},{"location":"tutorials/boat-buoyancy.html","title":"UE5 Boat Buoyancy integration Oceanology 5.2.0 rework","text":"<p>This video showcases the new re-worked version of oceanology's buoyancy physics volume which is now just one volume and it solves the world partition duplication bug. So it works better all around and is super easy now to integrate!</p>"},{"location":"tutorials/boat-buoyancy.html#video-tutorial","title":"Video Tutorial","text":"<p>Click the image above to watch the full tutorial or click here to view it on YouTube.</p>"},{"location":"tutorials/boat-buoyancy.html#summary","title":"Summary","text":"<p>In this tutorial, you will learn:</p> <ul> <li>How to use Oceanology buoyancy physics.</li> </ul>"},{"location":"tutorials/easy-survival-rpg.html","title":"How to Integrate Oceanology with Easy Survival RPG","text":"<p>This guide will help you integrate the Oceanology plugin with the Easy Survival RPG system in Unreal Engine. Below is a step-by-step video tutorial that explains the integration process.</p>"},{"location":"tutorials/easy-survival-rpg.html#video-tutorial","title":"Video Tutorial","text":"<p>Click the image above to watch the full tutorial or click here to view it on YouTube.</p>"},{"location":"tutorials/easy-survival-rpg.html#summary","title":"Summary","text":"<p>In this tutorial, you will learn:</p> <ul> <li>How to integrate Oceanology features into your Easy Survival RPG game.</li> </ul>"},{"location":"tutorials/oc-uds.html","title":"Unreal Engine 5 Ultra Dynamic Sky + Oceanology","text":"<p>This video tutorial is a demonstration on how to implementing Ultra Dynamic Sky and Oceanology together.</p>"},{"location":"tutorials/oc-uds.html#video-tutorial","title":"Video Tutorial","text":"<p>Click the image above to watch the full tutorial or click here to view it on YouTube.</p>"},{"location":"tutorials/oc-uds.html#summary","title":"Summary","text":"<p>In this tutorial, you will learn:</p> <ul> <li>How to use Oceanology with Ultra Dynamic Sky.</li> </ul>"},{"location":"tutorials/oc-worldscape.html","title":"OCEANOLOGY 5 with WorldScapePlugin","text":"<p>This video tutorial is a demonstration on how to implementing WorldScapePlugin and Oceanology together.</p>"},{"location":"tutorials/oc-worldscape.html#video-tutorial","title":"Video Tutorial","text":"<p>Click the image above to watch the full tutorial or click here to view it on YouTube.</p>"},{"location":"tutorials/oc-worldscape.html#summary","title":"Summary","text":"<p>In this tutorial, you will learn:</p> <ul> <li>How to use Oceanology with WorldScapePlugin.</li> </ul>"},{"location":"tutorials/rvt-multiple-landscapes.html","title":"Oceanology 5.2.0 RVT - Multiple landscapes","text":"<p>This video tutorial is a demonstration to obtain the height of multiple landscapes using the RVT actor</p>"},{"location":"tutorials/rvt-multiple-landscapes.html#video-tutorial","title":"Video Tutorial","text":"<p>Click the image above to watch the full tutorial or click here to view it on YouTube.</p>"},{"location":"tutorials/rvt-multiple-landscapes.html#summary","title":"Summary","text":"<p>In this tutorial, you will learn:</p> <ul> <li>How to integrate Oceanology with multiple landscapes.</li> </ul>"},{"location":"tutorials/rvt-setup.html","title":"Oceanology 5.2 RVT Update and Setup","text":"<p>This video tutorial is a demonstration of using the RVT system from scratch using the new Oceanology 5.2 RVT system.</p>"},{"location":"tutorials/rvt-setup.html#video-tutorial","title":"Video Tutorial","text":"<p>Click the image above to watch the full tutorial or click here to view it on YouTube.</p>"},{"location":"tutorials/rvt-setup.html#summary","title":"Summary","text":"<p>In this tutorial, you will learn:</p> <ul> <li>How to use Oceanology 5.2 RVT system.</li> </ul>"}]}